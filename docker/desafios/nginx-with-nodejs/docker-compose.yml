# A idéia principal é que quando um usuário acesse o nginx, o mesmo fará uma chamada em nossa aplicação node.js. Essa aplicação por sua vez adicionará um registro em nosso banco de dados mysql, cadastrando um nome na tabela people.
# O retorno da aplicação node.js para o nginx deverá ser:
# <h1>Full Cycle Rocks!</h1>
# - Lista de nomes cadastrada no banco de dados.
# Gere o docker-compose de uma forma que basta apenas rodarmos: docker-compose up -d que tudo deverá estar funcionando e disponível na porta: 8080.
# Suba tudo em um repositório e faça a entrega.

version: "3"

services:
  nodejs:
    build:
      context: nodejs
    container_name: nodejs
    networks:
      - desafio
    volumes:
    # remover depois
      - ./nodejs:/usr/src/app
    tty: true
    # depends_on:
    #   - mysql

  nginx:
    build:
      context: nginx
    container_name: nginx
    networks:
      - desafio
    ports:
      - "8080:80"
    depends_on:
      - nodejs

  # mysql:
  #   image: mysql:5.7
  #   # no caso do mysql este comando é necessário rodar após o container ser iniciado
  #   # após rodar o entrypoind
  #   command: --innodb-use-native-aio=0
  #   container_name: mysql
  #   # se por algum motivo o container cair ele cai reistartar o container automaticamente
  #   restart: always
  #   # habilita a forma de interação para caso a gente precise entrar no container
  #   # para rodar algum comando manualmente
  #   tty: true
  #   # tudo que o mysql gerar ficará armazenado neste volume, então os dados nunca se perderão
  #   volumes:
  #     - ./mysql:/var/lib/mysql
  #   environment:
  #     - MYSQL_DATABASE=nodedb
  #     - MYSQL_ROOT_PASSWORD=root
  #   networks:
  #     - desafio

networks:
  desafio:
    driver: bridge
